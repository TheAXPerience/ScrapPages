name: Scrap Pages Testing Workflow

# Set up how the workflow is triggered
on:

  # Trigger the workflow on push or pull request events on the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allow triggering this workflow manually from the Actions tab
  workflow_dispatch:

# Set up the job for this workflow
jobs:
  # Label of the container job
  build-postgres:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: admin123
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: node client.js
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432

  # This workflow contains a single job that we are calling "build-and-test"
  build-and-test:

    # The runner environment to use
    runs-on: ubuntu-latest

    # Steps mostly contain CLI commands (via "run") and actions (via "uses")
    # Each step begins with a hyphen -
    steps:       
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # You can optionally provide a name before a step. This is an example of an unnamed step.
      - uses: actions/checkout@v2

      # Runs a single echo command using the runners shell
      - run: echo Entering Django CI/CD Pipeline!
      
      # Uses the action setup-python@v2, specifying version 3.9
      # This installs Python 3.9 to the runner environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Enter the Django project
        run: cd scrappages
      
      # Runs a set of commands to install dependencies in the runner environment
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
     
      # Runs database migrations on the Django app
      - name: Run migrations
        run: python manage.py migrate
      
      # Run all tests with verbose flag
      - name: Run all tests
        run: pytest -v
